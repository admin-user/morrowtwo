= !ImageObject =

<wiki:toc max_depth="10" />

== Introduction ==

A class to manipulate images with the GDlib, usually used to create thumbnails. To allow a more versatile usage of this class independent of the context it is used in it does not offer any kind of caching. Simply use the default caching Morrow offers :)

== Example ==

The constructor requires exactly one parameter which can be any kind of image. Feel free to either pass a local path to an image (or URL if allowed) or a GD-Resource or even any kind of string representation of GIF, JPEG or PNG to the constructor

*Controller which outputs an image*
{{{
<?php
// ... Controller code
 
$image = new ImageObject(FW_PATH . 'cameron.jpg');
$image->resize(250, 250, 1);
$image->crop(250, 250);
$image->sharpen();
$image->addReflection();
$image->show('png');
die();
?>
}}}

== Methods ==

=== _resize()_ ===
{{{
bool resize( int $width , int $height , int $mode = 0)
}}}
Resizes the image according to the given values for width and height (in px) using the defined mode. mode can be set to one of the following values:

|| Value || Description ||
|| 0 || Disregards the original image aspect ratio and therefore possibly distorts the image ||
|| 1 || Keeps the original image aspect ratio resizing its shortest side to fit into given width and height ||
|| 2 || Keeps the original image aspect ratio resizing its longest side to fit into given width and height ||

=== _crop()_ ===
{{{
bool crop( int $width , int $height , int $x = false, int $y = false)
}}}
Crops the image according to the given values for width and height (in px). You may optionally pass additional values for x and y (also in px) which define the top left coordinates of the cropping area. If x and/or y are set to false (default setting) the image is cropped around its center which is automatically determined.

=== _flip()_ ===
{{{
bool flip( int $axes = 1)
}}}
Flips the image around the defined axes. axes can be set to one of the following values:

|| Value || Description ||
|| 1 || Flips the image around its y-axes ||
|| 2 || Flips the image around its x-axes ||

=== _blur()_ ===
{{{
bool blur( int $amount = 100, bool $alpha = true)
}}}
Blurs the image according to the given value for amount. Setting alpha to true (default) will preserve the original image alpha information while setting it to false discards any kind of alpha information (and greatly improves performance).

=== _sharpen()_ ===
{{{
bool sharpen( int $amount = 50, int $radius = 1, int $threshold = 0)
}}}
Sharpens the image according to the given values for amount, radius and treshold. The values of the parameters try to imitate Photoshops values when using its built-in sharpening filter.

=== _addBorder()_ ===
{{{
bool addBorder( string $color = '#000', int $stroke = 1)
}}}
Adds a simple border (or outline) to an image according to the given values for color (any hex-color) and stroke (in px).

=== _addReflection()_ ===
{{{
bool addReflection( int $aperture = 80, int $height = false, int $alpha = 40)
}}}
Adds an Apple like reflection with real alpha to an image according to the given values for aperture (in percent), height (in px) and alpha (in percent). If height is set to false it will be automatically calculated using aperture and the actual height of the image.

=== _addShadow()_ ===
{{{
bool addShadow( $color = '#000', $background = '#fff', $alpha = 50, $angle = 135, $distance = 2, $size = 5, $spread = 0)
}}}
Adds a Photoshop like dropshadow with real alpha to an image according to the given values for color (any hex-color), background (any hex-color), alpha (in percent), angle (in degress), distance (in px), size (in px) and spread (in px).

=== _get()_ ===
{{{
binary get( string $type = 'png', int $quality = 100)
}}}
Returns an image as a binary representation according to given type (png, jpeg or gif). If type is set to jpeg quality (in percent) is used as compression ratio.

=== _show()_ ===
{{{
show( string $type = 'png', int $quality = 100)
}}}
Outputs an image as a binary representation according to given type (png, jpeg or gif). If type is set to jpeg quality (in percent) is used as compression ratio. This method automatically sets content-type header.

=== _getResource()_ ===
{{{
resource &getResource( )
}}}
Returns a pointer to the current image GD-Resource